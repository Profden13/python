# 1. Реализовать класс «Дата»class Data:    data_text = ""    def __init__(self, data_text):        self.data_text = data_text            @classmethod    def data_to_int(cls, data_text):        data_list = data_text.split('-')        day = int(data_list[0])        month = int(data_list[1])        year = int(data_list[2])        return day, month, year        @staticmethod    def date_validation(day, month, year):        valid_data = True        if day < 1 or day > 31:            print("В дате день должен быть в диапазоне от 1 до 31")            valid_data = False        if month < 1 or month > 12:            print("В дате месяц должен быть в диапазоне от 1 до 12")            valid_data = False        if year < 1000 or month > 9999:            print("В дате месяц должен быть в диапазоне от 1000 до 9999")            valid_data = False        if valid_data:            return day, month, year        else:            print("Дата введена не корректно")            return None, None, None# Валидация - корректноday, month, year = Data.date_validation(12, 10, 2009)    print(f"День - {day}, месяц - {month}, год - {year}.")  # Валидация - не корректноday, month, year = Data.date_validation(13, 13, 209)    print(f"День - {day}, месяц - {month}, год - {year}.")               # Вызов метода через экземпляр классаdt = Data("13-07-2008")day, month, year = dt.data_to_int(dt.data_text)print(f"День - {day}, месяц - {month}, год - {year}.")   # Вызов метода через классday, month, year = Data.data_to_int("15-03-2019")print(f"День - {day}, месяц - {month}, год - {year}.")   day, month, year = Data.data_to_int("17-05-2020")day, month, year = Data.date_validation(day, month, year)print(f"День - {day}, месяц - {month}, год - {year}.")  day, month, year = Data.data_to_int("32-01-2010")day, month, year = Data.date_validation(day, month, year)print(f"День - {day}, месяц - {month}, год - {year}.")  # 2. Создайте собственный класс-исключение, обрабатывающий ситуацию деления на ноль.class OwnErrorDivZero(Exception):         def __init__(self, txt):        self.txt = txta = int(input("Введите делимое: "))b = int(input("Введите делитель: "))print("")try:    if b == 0:        raise OwnErrorDivZero("На ноль делить нельзя!")    res = a/b    except OwnErrorDivZero as err:    print(err) else:    print(f"Все хорошо. Результат деления: {res}")#3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.class FormatError(Exception):        def __init__(self, txt):        self.txt = txt data_list = []print('Введите элементы списка. Для окончания ввода введите "stop":')input_data = input()while input_data != "stop":     try:        if input_data.isdigit():            data_list.append(int(input_data))        else:            raise FormatError("Ошибка ввода! Введено не число!")    except FormatError as err:        print(err)      input_data = input()    print("\nПолученный список - ", data_list)#4. Начните работу над проектом «Склад оргтехники». Создайте класс, описывающий склад.#5. Разработайте методы, которые отвечают за приём оргтехники на склад и передачу в определённое подразделение компании. #6. Реализуйте механизм валидации вводимых пользователем данных. class Sklad:    name = ""    sklad_list = {}        def __init__(self, name):        self.name = name            def admission(self, item, num):        old_num = self.sklad_list.get(item)        if old_num == None:            self.sklad_list[item] = num        else:            self.sklad_list[item] = old_num + num        print(f"В департаменте {self.name} приняли на учет {item.brand} {item.model} в количестве {num} шт. Текущий остаток - {self.sklad_list[item]} шт.")        def write_off(self, item, num):        old_num = self.sklad_list.get(item)        if old_num == None:            print(f"На складе нет техники с наименованием  {item.brand} {item.model}.")        elif old_num < num:            print(f"На складе не достаточно позиций для списания техники с наименованием {item.brand} {item.model}. Текущий остаток - {old_num} шт.")        else:            self.sklad_list[item] = old_num - num            print(f"В департаменте {self.name} списали с учета {item.brand} {item.model} в количестве {num} шт. Текущий остаток - {self.sklad_list[item]} шт.")            def transfer(self, item, num, new_department):        old_num = self.sklad_list.get(item)        if old_num == None:            print(f"На складе нет техники с наименованием  {item.brand} {item.model}.")        elif old_num < num:            print(f"На складе не достаточно позиций для передачи техники с наименованием {item.brand} {item.model}. Текущий остаток - {old_num} шт.")        else:            self.sklad_list[item] = old_num - num            print(f"Из департамента {self.name} передали {item.brand} {item.model} в количестве {num} шт. в департамент {new_department}. Текущий остаток - {self.sklad_list[item]} шт.")        def print_list_equipment(self):        print("-"*40)        print(f"Подразделение - {self.name}")        for k in self.sklad_list.keys():            print(f"{k} - {self.sklad_list[k]}")        print("-"*40)            class OfficeEquipment:    brand = ""    model = ""        def __init__(self, brand, model):        self.brand = brand        self.model = model        def __str__(self):        return f"{self.brand} {self.model}"        class Printer(OfficeEquipment):    speed = 0    # Скорость печати стр/мин            def __init__(self, brand, model, speed):        super().__init__(brand, model)        self.speed = speed    class Scaner(OfficeEquipment):    pageformat = ""   #Формат сканирования        def __init__(self, brand, model, pageformat):        super().__init__(brand, model)        self.pageformat = pageformatclass Xerox(OfficeEquipment):    color = None    # True/False цветной или черно-белый        def __init__(self, brand, model, color):        super().__init__(brand, model)        self.color = colorsklad = Sklad("Склад")printer1 = Printer("HP", "LaserJet 1100", 30) printer2 = Printer("Epson", "2100", 25) scaner1 = Scaner("HP", "Scan2000", "A3")xerox1 = Xerox("HP", "XT-400", True)print(printer1)print(printer2)    print(scaner1)  print(xerox1)  sklad.admission(printer1, 5)sklad.admission(printer2, 2)sklad.admission(scaner1, 3)sklad.admission(xerox1, 1)sklad.admission(printer1, 2)sklad.print_list_equipment()sklad.write_off(xerox1, 2)sklad.transfer(printer1, 3, "Бухгалтерия")sklad.transfer(printer2, 3, "Администрация")sklad.transfer(scaner1, 1, "Администрация")sklad.print_list_equipment()#7. Реализовать проект «Операции с комплексными числами».class ComplexNumber:        def __init__(self, a, b):        self.a = a        self.b = b            def __str__(self):        return f"{self.a}+{self.b}i"        def __add__(self, other):        return ComplexNumber(self.a + other.a, self.b + other.b)        def __mul__(self, other):        return ComplexNumber(self.a * other.a - self.b * other.b, self.a * other.b + self.b * other.a)        a1 = int(input("Введите дейтвительную часть первого комплексного числа: "))        b1 = int(input("Введите коэффициент при мнимой части первого комплексного числа: ")) cn1 = ComplexNumber(a1, b1)print(f"\nПервое комплексное число - {cn1}")     a2 = int(input("Введите дейтвительную часть второго комплексного числа: "))   b2 = int(input("Введите коэффициент при мнимой части второго комплексного числа: "))  cn2 = ComplexNumber(a2, b2)print(f"\nВторое комплексное число - {cn2}")  print(f"\nСумма комплексных чисел равна - {cn1 + cn2}")cn3 = cn1 + cn2print(f"\nСумма комплексных чисел равна - {cn3}")print(f"\nСумма комплексных чисел равна - {cn1 * cn2}")cn4 = cn1 * cn2print(f"\nСумма комплексных чисел равна - {cn4}")